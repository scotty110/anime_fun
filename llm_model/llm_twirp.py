# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: llm.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient
try:
	from twirp.async_client import AsyncTwirpClient
	_async_available = True
except ModuleNotFoundError:
	_async_available = False

_sym_db = _symbol_database.Default()

class GenPlayingCardServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/twirp.server.GenPlayingCardService"
		self._endpoints = {
			"GenPlayingCard": Endpoint(
				service_name="GenPlayingCardService",
				name="GenPlayingCard",
				function=getattr(service, "GenPlayingCard"),
				input=_sym_db.GetSymbol("twirp.server.AText"),
				output=_sym_db.GetSymbol("twirp.server.AImage"),
			),
		}

class GenPlayingCardServiceClient(TwirpClient):

	def GenPlayingCard(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/twirp.server.GenPlayingCardService/GenPlayingCard",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("twirp.server.AImage"),
			**kwargs,
		)


if _async_available:
	class AsyncGenPlayingCardServiceClient(AsyncTwirpClient):

		async def GenPlayingCard(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/twirp.server.GenPlayingCardService/GenPlayingCard",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("twirp.server.AImage"),
				session=session,
				**kwargs,
			)

class GenBioServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/twirp.server.GenBioService"
		self._endpoints = {
			"GenBio": Endpoint(
				service_name="GenBioService",
				name="GenBio",
				function=getattr(service, "GenBio"),
				input=_sym_db.GetSymbol("twirp.server.AText"),
				output=_sym_db.GetSymbol("twirp.server.AText"),
			),
		}

class GenBioServiceClient(TwirpClient):

	def GenBio(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/twirp.server.GenBioService/GenBio",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("twirp.server.AText"),
			**kwargs,
		)


if _async_available:
	class AsyncGenBioServiceClient(AsyncTwirpClient):

		async def GenBio(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/twirp.server.GenBioService/GenBio",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("twirp.server.AText"),
				session=session,
				**kwargs,
			)

class GenCharacterServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/twirp.server.GenCharacterService"
		self._endpoints = {
			"GenCharacter": Endpoint(
				service_name="GenCharacterService",
				name="GenCharacter",
				function=getattr(service, "GenCharacter"),
				input=_sym_db.GetSymbol("twirp.server.AText"),
				output=_sym_db.GetSymbol("twirp.server.AImage"),
			),
		}

class GenCharacterServiceClient(TwirpClient):

	def GenCharacter(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/twirp.server.GenCharacterService/GenCharacter",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("twirp.server.AImage"),
			**kwargs,
		)


if _async_available:
	class AsyncGenCharacterServiceClient(AsyncTwirpClient):

		async def GenCharacter(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/twirp.server.GenCharacterService/GenCharacter",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("twirp.server.AImage"),
				session=session,
				**kwargs,
			)
